[{"title":"php 学习六","url":"/posts/44918/","content":"一、循环\n    while - 只要指定的条件成立，则循环执行代码块\n    do...while - 首先执行一次代码块，然后在指定的条件成立时重复这个循环\n    for - 循环执行代码块指定的次数\n    foreach - 根据数组中每个元素来循环代码块\n\n1、while循环\n语法：\n\twhile (条件)\n\t{\n    \t要执行的代码;\n\t}\n\n2、do while循环\n语法：\n\tdo\n\t{\n\t    要执行的代码;\n\t}\n\twhile (条件);\n\n3、for循环\n语法：\n\tfor (初始值; 条件; 增量)\n\t{\n   \t 要执行的代码;\n\t}\n参数：\n    初始值：主要是初始化一个变量值，用于设置一个计数器（但可以是任何在循环的开始被执行一次的代码）。\n    条件：循环执行的限制条件。如果为 TRUE，则循环继续。如果为 FALSE，则循环结束。\n    增量：主要用于递增计数器（但可以是任何在循环的结束被执行的代码）。\n注释：上面的初始值和增量参数可为空，或者有多个表达式（用逗号分隔）。\n\n 4、foreach循环\n语法：\n（1）\n\tforeach ($array as $value)\n\t{\n    \t要执行代码;\n\t}\n（2）\n\tforeach ($array as $key => $value)\n\t{\n   \t 要执行代码;\n\t}\n\n\n补充：冒泡循环\n输入：\n<?php\n$arr = array(5,3,6,2,8,10);\nfor($i = count($arr)-1;$i>=0;$i--){\n    for($j = 0 ; $j < $i ; $j++){\n        if($arr[$j+1] > $arr[$j] ){\n            $aa = $arr[$j+1];\n            $arr[$j+1] = $arr[$j];\n            $arr[$j] = $aa;\n        }\n    }\n}\nprint_r($arr);\n?>\n输出：\nArray\n(\n    [0] => 10\n    [1] => 8\n    [2] => 6\n    [3] => 5\n    [4] => 3\n    [5] => 2\n)\n\n\n二、函数\n1、函数准则：\n    （1）函数的名称应该提示出它的功能\n    （2）函数名称以字母或下划线开头（不能以数字开头）\n\n2、函数中添加参数\n注意：参数相当于一个变量\n输出：函数括号中的值+参数所表达的值\n\n3、函数返回值\n用return返回索要调用的函数值\n\n\n\n","categories":[],"tags":[]},{"title":"php 学习五","url":"/posts/36342/","content":"一、If...Else 语句\n    if 语句 - 在条件成立时执行代码\n    if...else 语句 - 在条件成立时执行一块代码，条件不成立时执行另一块代码\n    if...elseif....else 语句 - 在若干条件之一成立时执行一个代码块\n    switch 语句 - 在若干条件之一成立时执行一个代码块\n\n\n二、数组\n定义：数组是一个能在单个变量中储存多个值的特殊变量。\n在PHP中，array（）用于创建数组。\n\n有三种类型的数组：\n    数值数组 - 带有数字 ID 键的数组\n    关联数组 - 带有指定的键的数组，每个键关联一个值\n    多维数组 - 包含一个或多个数组的数组\n\n1、数值数组\n这里有两种创建数值数组的方法：\n（1）自动分配 ID 键（ID 键总是从 0 开始）：\n$cars=array(\"Volvo\",\"BMW\",\"Toyota\");\n（2）人工分配 ID 键：\n$cars[0]=\"Volvo\";\n$cars[1]=\"BMW\";\n$cars[2]=\"Toyota\"; \n注意：数组前后需要用点号隔开\n\n2、关联数组\n关联数组是使用您分配给数组的指定的键的数组。\n这里有两种创建关联数组的方法：\n（1）$age=array(\"Peter\"=>\"35\",\"Ben\"=>\"37\",\"Joe\"=>\"43\");\n\n（2）$age['Peter']=\"35\";\n         $age['Ben']=\"37\";\n         $age['Joe']=\"43\"; \n\n\n三、数组排序\n1、sort()函数\n作用：对数组进行升序排列\n（1）最终输出必须用print_r();\n（2）字母或数字都是按从小到大的顺序排列的\n\n2、rsort()函数\n作用：对数组进行降序排序\n（1）最终输出必须用print_r();\n（2）字母或数字都是按从大到小的顺序排列的\n\n3、asort()函数\n作用：根据数组的值，对数组进行升序排列\n（1）最终输出必须用print_r();\n（2）按值的字母或数字从小到大的顺序排列\n\n4、arsort()函数\n作用：根据数组的值，对数组进行降序排列\n（1）最终输出必须用print_r();\n（2）按值的字母或数字从大到小的顺序排列\n\n5、ksort()函数\n作用：根据数组的键，对数组进行升序排列\n（1）最终输出必须用print_r();\n（2）按照键的字母或数字从小到大排序\n\n6、krsort()函数\n作用： 根据数组的键，对数组进行降序排列\n（1）最终输出必须用print_r();\n（2）按照键的字母或数字从大到小排序\n———————————————————————————————\n学习笔记补充：\n1、date()函数\na - \"am\" 或是 \"pm\"；\n A - \"AM\" 或是 \"PM\"；\n D - 星期几，三个英文字母; 如: \"Fri\"；\n F - 月份，英文全名; 如: \"January\"；\n h - 12 小时制的小时; 如: \"01\" 至 \"12\"；\n g - 12 小时制的小时，不足二位不补零; 如: \"1\" 至 12\"；\n G - 24 小时制的小时，不足二位不补零; 如: \"0\" 至 \"23\"；\n j - 几日，二位数字，若不足二位不补零; 如: \"1\" 至 \"31\"；\n l - 星期几，英文全名; 如: \"Friday\"；\n n - 月份，二位数字，若不足二位则不补零; 如: \"1\" 至 \"12\"；\nm - 分钟，二位数字，若不足二位则补零；如：\"01\" 至 \"60\";\n M - 月份，三个英文字母; 如: \"Jan\"；\n S - 字尾加英文序数，二个英文字母; 如: \"th\"，\"nd\"；\n t - 指定月份的天数; 如: \"28\" 至 \"31\"；\n U - 总秒数；\n w - 数字型的星期几，如: \"0\" (星期日) 至 \"6\" (星期六)；\n y - 年，二位数字; 如: \"99\"；\n z - 一年中的第几天; 如: \"0\" 至 \"365\"。\n\n2、count()函数\n作用：用于返回数组的长度（元素的数量）\n\n3、print_r()函数\n作用：用于打印变量，以更容易理解的形式展示\n注：可用于数组内部排序\n\n\n\n","categories":[],"tags":[]},{"title":"php 学习四","url":"/posts/6655/","content":"一、字符串\n1、PHP中的字符串变量\n（1）字符串变量用于包含有字符的值\n\n（2）可以直接在函数中使用字符串，或者把它储存在变量中\n\n2、PHP 并置运算符（.）\n作用：用于把两个字符串值连接起来\n\n3、PHP strlen（）函数\n作用：返回字符串的长度（字节数）。\n\n4、PHP strpos（）函数\n作用：用于在字符串内查找一个字符或一段指定的文本。\n          如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE。\n\n\n二、运算符\n1、算术运算符\nx + y \t   加 \t                x 和 y 的和 \nx - y \t   减 \t                x 和 y 的差 \nx * y \t   乘 \t                x 和 y 的积 \nx / y \t   除 \t                x 和 y 的商 \nx % y \t   模（除法的余数） \tx 除以 y 的余数 \n-x                取反                         x取反\na . b \t   并置 \t                连接两个字符串 \n\n\n2、赋值运算符\nx = y \t   x = y \t                 左操作数被设置为右侧表达式的值\nx += y \t   x = x + y \t 加\nx -= y \t   x = x - y                 减\nx *= y \t   x = x * y \t 乘\nx /= y \t   x = x / y \t 除\nx %= y \t   x = x % y \t 模（除法的余数）\na .= b \t   a = a . b \t 连接两个字符串\n\n3、递增运算符\n++ x \t   预递增 \t                 x 加 1，然后返回 x\nx ++ \t   后递增 \t                 返回 x，然后 x 加 1\n-- x \t   预递减 \t                 x 减 1，然后返回 x\nx -- \t   后递减 \t                 返回 x，然后 x 减 1\n\n4、比较运算符\nx == y \t   等于 \t                如果 x 等于 y，则返回 true \t\nx === y \t   绝对等于 \t如果 x 等于 y，且它们类型相同，则返回 true \t\nx != y \t   不等于 \t                如果 x 不等于 y，则返回 true \t\nx <> y \t   不等于 \t                如果 x 不等于 y，则返回 true \t\nx !== y \t   绝对不等于 \t如果 x 不等于 y，或它们类型不相同，则返回 true \t\nx > y \t   大于 \t                如果 x 大于 y，则返回 true \t\nx < y \t   小于 \t                如果 x 小于 y，则返回 true \t\nx >= y \t   大于等于 \t如果 x 大于或者等于 y，则返回 true \t\nx <= y  \t   小于等于 \t如果 x 小于或者等于 y，则返回 true \t\n\n5、逻辑运算符\nx and y \t   与 \t                如果 x 和 y 都为 true，则返回 true \t\nx or y \t   或 \t                如果 x 和 y 至少有一个为 true，则返回 true \nx xor y \t   异或 \t                如果 x 和 y 有且仅有一个为 true，则返回 true \t\nx && y \t   与 \t                如果 x 和 y 都为 true，则返回 true \nx || y \t   或 \t                如果 x 和 y 至少有一个为 true，则返回 true \t\n! x \t   非 \t                如果 x 不为 true，则返回 true \tx=6\n\n6、数组运算符\nx + y \t   集合 \t                x 和 y 的集合\nx == y \t   相等 \t                如果 x 和 y 具有相同的键/值对，则返回 true\nx === y \t   恒等 \t                如果 x 和 y 具有相同的键/值对，且顺序相同类型相同，则返回 true\nx != y \t   不相等 \t                如果 x 不等于 y，则返回 true\nx <> y \t   不相等                   如果 x 不等于 y，则返回 true\nx !== y \t   不恒等   \t                如果 x 不等于 y，则返回 true\n\n7、三元运算符\n(expr1) ? (expr2) : (expr3) \n对 expr1 求值为 TRUE 时的值为 expr2，在 expr1 求值为 FALSE 时的值为 expr3。\n\n8、组合比较符\n$c = $a <=> $b;\n解析如下：\n    如果 $a > $b, 则 $c 的值为 1。\n    如果 $a == $b, 则 $c 的值为 0。\n    如果 $a < $b, 则 $c 的值为 -1。\n\n9、运算符优先级\n无 \t   clone new \t clone 和 new\n左 \t   [ \t               array()\n右 \t   ++ -- ~ (int) (float) (string) (array) (object) (bool) @ \t类型和递增／递减\n无 \t   instanceof \t 类型\n右 \t   ! \t               逻辑运算符\n左 \t   * / %    \t 算术运算符\n左 \t   + – .     \t 算术运算符和字符串运算符\n左 \t   << >> \t 位运算符\n无 \t   == != === !== <> \t比较运算符\n左 \t   & \t               位运算符和引用\n左 \t   ^ \t               位运算符\n左                |\t               位运算符\n左 \t   && \t               逻辑运算符\n左 \t   || \t               逻辑运算符\n左 \t   ? : \t               三元运算符\n右 \t   = += -= *= /= .= %= &= |= ^= <<= >>= => \t赋值运算符\n左 \t   and \t               逻辑运算符\n左 \t   xor \t               逻辑运算符\n左 \t   or \t               逻辑运算符\n左 \t   , \t               多处用到\n \n——————————————————————————————————————————————————\n学习笔记补充：\n1、intdiv()函数\n    作用：返回值为第一个参数除于第二个参数的值并取整（向下取整）\n2、isset()函数\n    作用：用于检测变量是否已设置并且非NULL。如果已经使用unset（）释放了一个变量之后，再通过isset（）判断将返回FALSE。\n3、PHP_EOL 是一个换行符，兼容更大平台。\n4、=>,->的意思和用法：\n（1）意思:\n（a）->是对象执行方法或取得属性用的。\n（b）=>是数组里键和值对应用的。（左侧表示键，右侧表示值）\n\n（2）用法\n（a）=> 的用法数组中用于数组的 key 和 value之间的关系例如：\n$a = array('0' => '1','2' => '4',);echo $a['0'];echo $a['2'];\n（b）-> 的用法类中用于引用类实例的方法和属性例如：\nclass Test{function add(){return $this->var++;}var $var = 0;}$a = new Test; \n//实例化对象名称\n\n\n\n\n\n\n\n\n","categories":[],"tags":[]},{"title":"php 学习三","url":"/posts/58423/","content":"一、PHP类型比较\n（1）松散比较：使用两个等号 == 比较，只比较值，不比较类型；\n（2）严格比较：用三个等号 === 比较，除了比较值，也比较类型。\n\n\n二、PHP中比较0、false、null、\"\"、\"0\"\n对于 【0 ；'0' ；'' ；null； false】五种类型\n\nempty操作以上五个变量，都返回false\n\n强等于(===)比较 都为false，同强语言结果(三个等号比较不但要比较值，而且要比较类型)\n\n但对于(==)比较，需要注意string类型，涉及到底层结构与类型转换\n\n结论一：关于变量类型的理解\n\n1.null为不存在之意：php底层的zval空间里（结构见下方）没有存其value值，只存储了一个type标志其 IS_NULL(所以解释了 empty(null)=true，isset(null)=false ，isset('')=true)\n\n2.【0 ; '0' ; '' ; false 】：这四个为存在，php底层是开辟zval空间存储，有value,有type\n\n结论二：\n\n1、string '0'与 string '' 不相等,（想一下就明白，同类型比较【1个长度】的字符串怎么可能 等于 【0个长度】 的字符串）\n\n2、int 0 却和 string '' 空相等,（非同类形比较，php会做类型转换）\n\n3、string '0' 与 null 不相等，int 0 与 null 相等\n\n\n三、PHP常量\n\t常量是一个简单值的标识符。该值在脚本中不能改变。\n\t一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)。\n\t注意： 常量在整个脚本中都可以使用。\n\ndefine()函数语法如下：\nbool define ( string $name , mixed $value [, bool $case_insensitive = false ] )\n该函数有三个参数：\n    name：必选参数，常量名称，即标志符。\n    value：必选参数，常量的值。\n    case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":[],"tags":[]},{"title":"php 学习二","url":"/posts/34806/","content":"一、echo和print语句的区别\n* echo - 可以输出一个或多个字符串\n* print - 只允许输出一个字符串，返回值总为 1\n提示：echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。\n\n\n二、EOF(heredoc) 使用说明\nPHP EOF(heredoc)是一种在命令行shell（如sh、csh、ksh、bash、PowerShell和zsh）和程序语言（像Perl、PHP、Python和Ruby）里定义一个字符串的方法。\n 使用概述：\n1. 必须后接分号，否则编译通不过。\n2. EOF 可以用任意其它字符代替，只需保证结束标识与开始标识一致。\n3. 结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)。***\n4. 开始标识可以不带引号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号。\n5. 当内容需要内嵌引号（单引号或双引号）时，不需要加转义符，本身对单双引号转义。\n\n\n三、数据类型\nString（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）。\n1、字符串型\n既可以把文本放在单引号中，也可哟把文本放在双引号中。\n\n2、整型\n整数规则：\n    整数必须至少有一个数字 (0-9)\n    整数不能包含逗号或空格\n    整数是没有小数点的\n    整数可以是正数或负数\n    整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）。\n\n3、浮点型\n带小数的类型\n\n4、布尔型\n用于条件判断，可以是true或false\n\n5、数组\n在一个变量中储存多个值\n\n6、对象\n对象数据类型也可以用于存储数据。\n在 PHP 中，对象必须声明。\n首先，你必须使用class关键字声明类对象，类是可以包含属性和方法的结构。\n实例\n||<?php\nclass Car\n{\n     var $color;//声明汽车的颜色属性\n\t function __construct($color=\"green\") //汽车类的构造函数(new时调用)，默认颜色参数值为绿色\n\t{\n      $this->color = $color;//将汽车的颜色属性值设置为传入的颜色\n    }\n    function what_color() //获取汽车颜色的方法\n\t{\n      return $this->color;\n\t\t/*$this代表Car类中的变量,“->”代表访问，\n\t\t它的意思是把$color这个Car类中的Car函数的变量赋值给Car类中的$color变量*/\n    }\n}\nfunction print_vars($obj) {\n   foreach (get_object_vars($obj) as $prop => $val) {\n     echo \"\\t$prop = $val\\n\";\n   }\n}\n\n// 实例一个对象\n$herbie = new Car(\"white\");\n// 显示 herbie 属性\necho \"\\therbie: Properties\\n\";\nprint_vars($herbie);//格式化输出，这里会输出$herbie所有的信息，包括类型、值……\n?>  ||\n\n7、NULL值\nNULL 值表示变量没有值\n————————————————————————————————————————————\n学习笔记补充：\n1、var_dump（）函数作用：php var_dump 函数作用是判断一个变量的类型与长度,并输出变量的数值,如果变量有值输的是变量的值并回返数据类型\n注：用var_dump里面的变量必须是存在的,如果变量存在但值是空的就会返回false。\n2、var_dump 和 print_r 的区别\nvar_dump 返回表达式的类型与值而 print_r 仅返回结果\n\n\n\n\n\n\n\n\n\n","categories":[],"tags":[]},{"title":"php 学习一","url":"/posts/58103/","content":"一、PHP语法\n1、PHP 脚本可以放在文档中的任何位置。\n2、PHP 脚本以 <?php 开始，以 ?> 结束：\n3、PHP 文件的默认文件扩展名是 \".php\"。\n4、PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码。\n5、PHP 中的每个代码行都必须以分号结束。分号是一种分隔符，用于把指令集区分开来。\n6、通过 PHP，有两种在浏览器输出文本的基础指令：echo 和 print。\n\n\n二、PHP变量\n1、PHP 变量规则：\n（1）变量以 $ 符号开始，后面跟着变量的名称\n（2）变量名必须以字母或者下划线字符开始\n（3）变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）\n（4）变量名不能包含空格\n（5）变量名是区分大小写的（$y 和 $Y 是两个不同的变量）\n2、PHP变量作用域：\n*local     *global     *static      *parameter\n（1）局部和全局作用域\n 在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字。\n在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问： \n实例\n||<?php\n$x=5; // 全局变量\n\nfunction myTest()\n{\n    $y=10; // 局部变量\n    echo \"<p>测试函数内变量:<p>\";\n    echo \"变量 x 为: $x\";\n    echo \"<br>\";\n    echo \"变量 y 为: $y\";\n} \n\nmyTest();\n\necho \"<p>测试函数外变量:<p>\";\necho \"变量 x 为: $x\";\necho \"<br>\";\necho \"变量 y 为: $y\";\n?> ||\n分析： 在以上实例中 myTest() 函数定义了 $x 和 $y 变量。 $x 变量在函数外声明，所以它是全局变量 ， $y 变量在函数内声明所以它是局部变量。\n\n当我们调用myTest()函数并输出两个变量的值, 函数将会输出局部变量 $y 的值，但是不能输出 $x 的值，因为 $x 变量在函数外定义，无法在函数内使用，如果要在一个函数中访问一个全局变量，需要使用 global 关键字。\n\n然后我们在myTest()函数外输出两个变量的值，函数将会输出全局变量 $x 的值，但是不能输出 $y 的值，因为 $y 变量在函数中定义，属于局部变量。\n\n\n（2）PHP global 关键字\n global 关键字用于函数内访问全局变量。\n在函数内调用函数外定义的全局变量，我们需要在函数中的变量前加上 global 关键字：\n实例：\n||<?php\n$x=5;\n$y=10;\n \nfunction myTest()\n{\n    global $x,$y;\n    $y=$x+$y;\n}\n \nmyTest();\necho $y; // 输出 15\n?>||\n\nPHP 将所有全局变量存储在一个名为 $GLOBALS[index] 的数组中。 index 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。\n上面的实例可以写成这样：\n实例：\n||<?php\n$x=5;\n$y=10;\n \nfunction myTest()\n{\n    $GLOBALS['y']=$GLOBALS['x']+$GLOBALS['y'];\n} \n \nmyTest();\necho $y;\n?>\n\n实例\n<?php\n$x=5;\n$y=10;\n \nfunction myTest()\n{\n    $GLOBALS['y']=$GLOBALS['x']+$GLOBALS['y'];\n} \n \nmyTest();\necho $y;\n?>||\n\n（3）Static 作用域\n当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。\n要做到这一点，请在您第一次声明变量时使用 static 关键字：\n实例\n||<?php\nfunction myTest()\n{\n    static $x=0;\n    echo $x;\n    $x++;\n    echo PHP_EOL;    // 换行符\n}\n \nmyTest();\nmyTest();\nmyTest();\n?>||\n然后，每次调用该函数时，该变量将会保留着函数前一次被调用时的值。\n注释：该变量仍然是函数的局部变量。\n\n（4）参数作用域\n参数是通过调用代码将值传递给函数的局部变量。\n\n参数是在参数列表中声明的，作为函数声明的一部分：\n实例\n||<?php\nfunction myTest($x)\n{\n    echo $x;\n}\nmyTest(5);\n?>||","categories":[],"tags":[]}]