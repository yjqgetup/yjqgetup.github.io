<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-01-29T11:10:55.003Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>php学习三</title>
    <link href="http://example.com/2021/01/29/php%E5%AD%A6%E4%B9%A0%E4%B8%89/"/>
    <id>http://example.com/2021/01/29/php%E5%AD%A6%E4%B9%A0%E4%B8%89/</id>
    <published>2021-01-29T08:19:24.000Z</published>
    <updated>2021-01-29T11:10:55.003Z</updated>
    
    <content type="html"><![CDATA[<p>一、PHP类型比较<br>（1）松散比较：使用两个等号 == 比较，只比较值，不比较类型；<br>（2）严格比较：用三个等号 === 比较，除了比较值，也比较类型。</p><p>二、PHP中比较0、false、null、””、”0”<br>对于 【0 ；’0’ ；’’ ；null； false】五种类型</p><p>empty操作以上五个变量，都返回false</p><p>强等于(===)比较 都为false，同强语言结果(三个等号比较不但要比较值，而且要比较类型)</p><p>但对于(==)比较，需要注意string类型，涉及到底层结构与类型转换</p><p>结论一：关于变量类型的理解</p><p>1.null为不存在之意：php底层的zval空间里（结构见下方）没有存其value值，只存储了一个type标志其 IS_NULL(所以解释了 empty(null)=true，isset(null)=false ，isset(‘’)=true)</p><p>2.【0 ; ‘0’ ; ‘’ ; false 】：这四个为存在，php底层是开辟zval空间存储，有value,有type</p><p>结论二：</p><p>1、string ‘0’与 string ‘’ 不相等,（想一下就明白，同类型比较【1个长度】的字符串怎么可能 等于 【0个长度】 的字符串）</p><p>2、int 0 却和 string ‘’ 空相等,（非同类形比较，php会做类型转换）</p><p>3、string ‘0’ 与 null 不相等，int 0 与 null 相等</p><p>三、PHP常量<br>    常量是一个简单值的标识符。该值在脚本中不能改变。<br>    一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)。<br>    注意： 常量在整个脚本中都可以使用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、PHP类型比较&lt;br&gt;（1）松散比较：使用两个等号 == 比较，只比较值，不比较类型；&lt;br&gt;（2）严格比较：用三个等号 === 比较，除了比较值，也比较类型。&lt;/p&gt;
&lt;p&gt;二、PHP中比较0、false、null、””、”0”&lt;br&gt;对于 【0 ；’0’ ；’’ ；</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php学习二</title>
    <link href="http://example.com/2021/01/27/php%E5%AD%A6%E4%B9%A0%E4%BA%8C/"/>
    <id>http://example.com/2021/01/27/php%E5%AD%A6%E4%B9%A0%E4%BA%8C/</id>
    <published>2021-01-27T06:16:44.000Z</published>
    <updated>2021-01-27T07:27:39.068Z</updated>
    
    <content type="html"><![CDATA[<p>一、echo和print语句的区别</p><ul><li>echo - 可以输出一个或多个字符串</li><li>print - 只允许输出一个字符串，返回值总为 1<br>提示：echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</li></ul><p>二、EOF(heredoc) 使用说明<br>PHP EOF(heredoc)是一种在命令行shell（如sh、csh、ksh、bash、PowerShell和zsh）和程序语言（像Perl、PHP、Python和Ruby）里定义一个字符串的方法。<br> 使用概述：</p><ol><li>必须后接分号，否则编译通不过。</li><li>EOF 可以用任意其它字符代替，只需保证结束标识与开始标识一致。</li><li>结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)。***</li><li>开始标识可以不带引号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号。</li><li>当内容需要内嵌引号（单引号或双引号）时，不需要加转义符，本身对单双引号转义。</li></ol><p>三、数据类型<br>String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）。<br>1、字符串型<br>既可以把文本放在单引号中，也可哟把文本放在双引号中。</p><p>2、整型<br>整数规则：<br>    整数必须至少有一个数字 (0-9)<br>    整数不能包含逗号或空格<br>    整数是没有小数点的<br>    整数可以是正数或负数<br>    整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）。</p><p>3、浮点型<br>带小数的类型</p><p>4、布尔型<br>用于条件判断，可以是true或false</p><p>5、数组<br>在一个变量中储存多个值</p><p>6、对象<br>对象数据类型也可以用于存储数据。<br>在 PHP 中，对象必须声明。<br>首先，你必须使用class关键字声明类对象，类是可以包含属性和方法的结构。<br>实例<br>||&lt;?php<br>class Car<br>{<br>     var $color;//声明汽车的颜色属性<br>     function __construct($color=”green”) //汽车类的构造函数(new时调用)，默认颜色参数值为绿色<br>    {<br>      $this-&gt;color = $color;//将汽车的颜色属性值设置为传入的颜色<br>    }<br>    function what_color() //获取汽车颜色的方法<br>    {<br>      return $this-&gt;color;<br>        /<em>$this代表Car类中的变量,“-&gt;”代表访问，<br>        它的意思是把$color这个Car类中的Car函数的变量赋值给Car类中的$color变量</em>/<br>    }<br>}<br>function print_vars($obj) {<br>   foreach (get_object_vars($obj) as $prop =&gt; $val) {<br>     echo “\t$prop = $val\n”;<br>   }<br>}</p><p>// 实例一个对象<br>$herbie = new Car(“white”);<br>// 显示 herbie 属性<br>echo “\therbie: Properties\n”;<br>print_vars($herbie);//格式化输出，这里会输出$herbie所有的信息，包括类型、值……<br>?&gt;  ||</p><p>7、NULL值<br>NULL 值表示变量没有值<br>————————————————————————————————————————————<br>学习笔记补充：<br>1、var_dump（）函数作用：php var_dump 函数作用是判断一个变量的类型与长度,并输出变量的数值,如果变量有值输的是变量的值并回返数据类型<br>注：用var_dump里面的变量必须是存在的,如果变量存在但值是空的就会返回false。<br>2、var_dump 和 print_r 的区别<br>var_dump 返回表达式的类型与值而 print_r 仅返回结果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、echo和print语句的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;echo - 可以输出一个或多个字符串&lt;/li&gt;
&lt;li&gt;print - 只允许输出一个字符串，返回值总为 1&lt;br&gt;提示：echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php学习一</title>
    <link href="http://example.com/2021/01/25/php%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://example.com/2021/01/25/php%E5%AD%A6%E4%B9%A0%E4%B8%80/</id>
    <published>2021-01-25T04:19:15.000Z</published>
    <updated>2021-01-25T05:05:02.009Z</updated>
    
    <content type="html"><![CDATA[<p>一、PHP语法<br>1、PHP 脚本可以放在文档中的任何位置。<br>2、PHP 脚本以 <?php 开始，以 ?> 结束：<br>3、PHP 文件的默认文件扩展名是 “.php”。<br>4、PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码。<br>5、PHP 中的每个代码行都必须以分号结束。分号是一种分隔符，用于把指令集区分开来。<br>6、通过 PHP，有两种在浏览器输出文本的基础指令：echo 和 print。</p><p>二、PHP变量<br>1、PHP 变量规则：<br>（1）变量以 $ 符号开始，后面跟着变量的名称<br>（2）变量名必须以字母或者下划线字符开始<br>（3）变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）<br>（4）变量名不能包含空格<br>（5）变量名是区分大小写的（$y 和 $Y 是两个不同的变量）<br>2、PHP变量作用域：<br>*local     *global     *static      *parameter<br>（1）局部和全局作用域<br> 在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字。<br>在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问：<br>实例<br>||&lt;?php<br>$x=5; // 全局变量</p><p>function myTest()<br>{<br>    $y=10; // 局部变量<br>    echo “<p>测试函数内变量:<p>“;<br>    echo “变量 x 为: $x”;<br>    echo “<br>“;<br>    echo “变量 y 为: $y”;<br>} </p><p>myTest();</p><p>echo “<p>测试函数外变量:<p>“;<br>echo “变量 x 为: $x”;<br>echo “<br>“;<br>echo “变量 y 为: $y”;<br>?&gt; ||<br>分析： 在以上实例中 myTest() 函数定义了 $x 和 $y 变量。 $x 变量在函数外声明，所以它是全局变量 ， $y 变量在函数内声明所以它是局部变量。</p><p>当我们调用myTest()函数并输出两个变量的值, 函数将会输出局部变量 $y 的值，但是不能输出 $x 的值，因为 $x 变量在函数外定义，无法在函数内使用，如果要在一个函数中访问一个全局变量，需要使用 global 关键字。</p><p>然后我们在myTest()函数外输出两个变量的值，函数将会输出全局变量 $x 的值，但是不能输出 $y 的值，因为 $y 变量在函数中定义，属于局部变量。</p><p>（2）PHP global 关键字<br> global 关键字用于函数内访问全局变量。<br>在函数内调用函数外定义的全局变量，我们需要在函数中的变量前加上 global 关键字：<br>实例：<br>||&lt;?php<br>$x=5;<br>$y=10;</p><p>function myTest()<br>{<br>    global $x,$y;<br>    $y=$x+$y;<br>}</p><p>myTest();<br>echo $y; // 输出 15<br>?&gt;||</p><p>PHP 将所有全局变量存储在一个名为 $GLOBALS[index] 的数组中。 index 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。<br>上面的实例可以写成这样：<br>实例：<br>||&lt;?php<br>$x=5;<br>$y=10;</p><p>function myTest()<br>{<br>    $GLOBALS[‘y’]=$GLOBALS[‘x’]+$GLOBALS[‘y’];<br>} </p><p>myTest();<br>echo $y;<br>?&gt;</p><p>实例<br>&lt;?php<br>$x=5;<br>$y=10;</p><p>function myTest()<br>{<br>    $GLOBALS[‘y’]=$GLOBALS[‘x’]+$GLOBALS[‘y’];<br>} </p><p>myTest();<br>echo $y;<br>?&gt;||</p><p>（3）Static 作用域<br>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。<br>要做到这一点，请在您第一次声明变量时使用 static 关键字：<br>实例<br>||&lt;?php<br>function myTest()<br>{<br>    static $x=0;<br>    echo $x;<br>    $x++;<br>    echo PHP_EOL;    // 换行符<br>}</p><p>myTest();<br>myTest();<br>myTest();<br>?&gt;||<br>然后，每次调用该函数时，该变量将会保留着函数前一次被调用时的值。<br>注释：该变量仍然是函数的局部变量。</p><p>（4）参数作用域<br>参数是通过调用代码将值传递给函数的局部变量。</p><p>参数是在参数列表中声明的，作为函数声明的一部分：<br>实例<br>||<?phpfunction myTest($x){    echo $x;}myTest(5);?>||</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、PHP语法&lt;br&gt;1、PHP 脚本可以放在文档中的任何位置。&lt;br&gt;2、PHP 脚本以 &lt;?php 开始，以 ?&gt; 结束：&lt;br&gt;3、PHP 文件的默认文件扩展名是 “.php”。&lt;br&gt;4、PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码。&lt;br&gt;5、PH</summary>
      
    
    
    
    
  </entry>
  
</feed>
