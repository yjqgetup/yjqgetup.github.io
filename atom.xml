<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-23T08:29:58.907Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>靶场搭建与SQL基础知识点</title>
    <link href="http://example.com/2021/10/01/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E4%B8%8ESQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://example.com/2021/10/01/%E9%9D%B6%E5%9C%BA%E6%90%AD%E5%BB%BA%E4%B8%8ESQL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9/</id>
    <published>2021-10-01T05:36:50.000Z</published>
    <updated>2021-10-23T08:29:58.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1、MySQL数据库基础"><a href="#1、MySQL数据库基础" class="headerlink" title="1、MySQL数据库基础"></a><strong>1、MySQL数据库基础</strong></h2><h3 id="1-1MySQL数据库基础"><a href="#1-1MySQL数据库基础" class="headerlink" title="1.1MySQL数据库基础"></a><strong>1.1MySQL数据库基础</strong></h3><p>数据库：用来存放数据的仓库。</p><h3 id="1-2WEB服务介绍"><a href="#1-2WEB服务介绍" class="headerlink" title="1.2WEB服务介绍"></a><strong>1.2WEB服务介绍</strong></h3><p>​                <img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-1.png?raw=true" alt="img1-1.png"></p><h3 id="1-3-SQL简介"><a href="#1-3-SQL简介" class="headerlink" title="1.3 SQL简介"></a><strong>1.3</strong> <strong>SQL简介</strong></h3><p>SQL是一种数据查询和程序设计语言。用于存储数据以及查询、更新和管理关系数据库系统。</p><h3 id="1-4搭建MySQL环境"><a href="#1-4搭建MySQL环境" class="headerlink" title="1.4搭建MySQL环境"></a><strong>1.4搭建MySQL环境</strong></h3><p>1、phpstudy下载：<a href="https://www.xp.cn/">https://www.xp.cn/</a></p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-2.png?raw=true" alt="img1-2.png"></p><p>2、数据库图形管理工具:<a href="https://dbeaver.io(推荐用谷歌下载)/">https://dbeaver.io（推荐用谷歌下载）</a></p><p> <img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-3.png?raw=true" alt="img1-3.png"></p><h3 id="1-5-MySQL数据库结构"><a href="#1-5-MySQL数据库结构" class="headerlink" title="1.5 MySQL数据库结构"></a><strong>1.5</strong> <strong>MySQL数据库结构</strong></h3><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-4.png?raw=true" alt="img1-4.png"></p><p>数据库结构中包含表，表是由列组成，表的数据存储方式是按行存储。</p><h3 id="1-6数据类型"><a href="#1-6数据类型" class="headerlink" title="1.6数据类型"></a><strong>1.6数据类型</strong></h3><p><strong>数值类型：</strong></p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-5.png?raw=true" alt="img1-5.png"></p><p><strong>日期和时间类型：</strong></p><p> <img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-6.png?raw=true" alt="img1-6.png"></p><p><strong>字符串类型：</strong></p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-7.png?raw=true" alt="img1-7.png"></p><p>注意：char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</p><h3 id="1-7SQL约束"><a href="#1-7SQL约束" class="headerlink" title="1.7SQL约束"></a><strong>1.7SQL约束</strong></h3><p>含义:一种限制,用于限制表中的数据，为了保证表中数据的准确性和可靠性。</p><p>分类:六大约束</p><p>1.NOT NULL:非空，用于保证该字段的值不能为空。例如学生表的学生姓名及学号等等。</p><p>2.DEFAULT:默认值，用于保证该字段有默认值。例如学生表的学生性别         </p><p>3.PRIMARY KEY:主键，用于保证该字段的值具有唯一性并且非空。例如学生表的学生学号等。</p><p>4.UNIQUE:唯一，用于保证该字段的值具有唯一性，可以为空。例如注册用户的手机号，身份证号等。</p><p>5.CHECK:检查约束(MySql不支持)，检查字段的值是否为指定的值。</p><p>6.FOREIGNKEY:外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的流，在从表添加外键约束，用于引用主表中某些的值。例如学生表的专业编号</p><p>添加约束的实际:</p><p>1.创建表时</p><p>2.修改表时</p><h2 id="2、SQL语句讲解"><a href="#2、SQL语句讲解" class="headerlink" title="2、SQL语句讲解"></a><strong>2、SQL语句讲解</strong></h2><h3 id="2-1常用SQL语句"><a href="#2-1常用SQL语句" class="headerlink" title="2.1常用SQL语句"></a><strong>2.1常用SQL语句</strong></h3><p>SQL的范围包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。</p><p>可以把SQL分为两个部分：数据操作语言（DML）和数据定义语言（DDL）</p><p>增删改查指令构成了SQL的DML部分：</p><p>SELECT–从数据库表中获取数据</p><p>UPDATE–更新数据库表中的数据</p><p>DELETE–从数据库表中删除数据</p><p>INSERT INTO–向数据库表中插入数据</p><p>SQL的DDL部分使我们有能力创建或删除表格：</p><p>CREATE DATABASE–创建新数据库</p><p>ALTER DATABASE–修改数据库</p><p>CREATE TABLE–创建新表</p><p>ALTER TABLE–改变数据库表</p><p>DROP TABLE–删除表</p><h3 id="2-2常用SQL语句"><a href="#2-2常用SQL语句" class="headerlink" title="2.2常用SQL语句"></a><strong>2.2常用SQL语句</strong></h3><p>01、显示数据库show databases;</p><p>02、打开数据库use db_name;</p><p>03、显示数据表show tables;</p><p>04、显示表结构describe table_name;</p><p>05、显示表中各字段信息，即表结构show columns from table_name;</p><p>06、显示表创建过程show create table表名;</p><p>07、列出当前mysql的相关状态信息status;</p><p>08、删除数据库drop database数据库名;</p><p>09、清空数据表delete from table_name;   truncate table table_name;</p><p>10、删除数据表drop table table_name</p><p>11、数据库连接mysql -u root -p（cmd命令行）</p><p>12、数据库退出exit</p><h3 id="2-3增删改查"><a href="#2-3增删改查" class="headerlink" title="2.3增删改查"></a><strong>2.3增删改查</strong></h3><h4 id="01-select语句："><a href="#01-select语句：" class="headerlink" title="01.select语句："></a><strong>01.select语句：</strong></h4><p>定义：从数据库表中读取数据（某一列或某几列）</p><p><strong>语法1：**</strong>select  列名  from  表名;**</p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-8.png?raw=true" alt="img1-8.png"></p><p><strong>语法2：**</strong>select * from  表名;**  </p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-9.png?raw=true" alt="img1-9.png"></p><h4 id="02-insert-into语句："><a href="#02-insert-into语句：" class="headerlink" title="02.insert into语句："></a><strong>02.insert into语句：</strong></h4><p>定义：用于向表格中插入新的行</p><p><strong>语法1：insert  into  表名称  values （值1，值2，…）</strong></p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-10.png?raw=true" alt="img1-10.png"></p><p><strong>语法2：insert into 表名称 （列1，列2，…） values （值1，值2，…）</strong></p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-11.png?raw=true" alt="img1-11.png"></p><h4 id="03-update语句："><a href="#03-update语句：" class="headerlink" title="03.update语句："></a><strong>03.update语句：</strong></h4><p>定义：用于修改表中发数据</p><p><strong>语法：update  表名称  set  列名称=新值  where  列名称=某值</strong></p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-11.png?raw=true" alt="img1-11.png"  /><h4 id="04-delete语句："><a href="#04-delete语句：" class="headerlink" title="04.delete语句："></a><strong>04.delete语句：</strong></h4><p>定义：删除表中的行</p><p><strong>语法1：delete  from  表名称  where  列名称=值</strong></p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-13.png?raw=true" alt="img1-13.png"></p><h3 id="2-4-order-by语句："><a href="#2-4-order-by语句：" class="headerlink" title="2.4.order by语句："></a><strong>2.4.order by语句：</strong></h3><p>定义： 用于对结果集进行排序。</p><p>  用于根据指定的列对结果集进行排序。</p><p>  默认按照升序对记录进行排序。</p><p>  按照降序对记录排序,使用DESC关键字。</p><p>  order by 排序列数大于当前查询的列数时就会报错</p><p>  sq1注入利用这个特性来判断列数以及显示位</p><p><strong>语法1：select  列名称  from  表名称  order by  列名称</strong></p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-14.png?raw=true" alt="img1-14.png"></p><p><strong>语法2：select  列名称  from  表名称  order by  列名称</strong>  <strong>desc</strong></p><p> <img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-15.png?raw=true" alt="img1-15.png"></p><h3 id="2-5where语句、and-和-or-运算符："><a href="#2-5where语句、and-和-or-运算符：" class="headerlink" title="2.5where语句、and 和 or 运算符："></a><strong>2.5where语句、and 和 or 运算符：</strong></h3><p>where语句定义：有条件的从表中选取数据（and 和 or 可在where子句中把两个或多个条件结合起来）</p><p><strong>语法：select  列名称  from  表名称  where  列  运算符  值</strong></p><p>and运算符：</p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-16.png?raw=true" alt="img1-16.png"></p><p>or运算符（满足1个条件）：</p><p> <img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-17.png?raw=true" alt="img1-17.png"></p><p>or运算符（满足2个条件）：</p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-18.png?raw=true" alt="img1-18.png"></p><h3 id="2-6limit控制输出："><a href="#2-6limit控制输出：" class="headerlink" title="2.6limit控制输出："></a><strong>2.6limit控制输出：</strong></h3><p>定义：控制显示数据的数目</p><p><strong>语法：select  列名称  from  表名称  limit  m,n</strong></p><p><strong>注意：m表示第m+1行（0为第一行，依此类推），n从m+1行开始所要显示的几条数据</strong></p><p> <img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-19.png?raw=true" alt="img1-19.png"></p><h3 id="2-7MySQL注释符："><a href="#2-7MySQL注释符：" class="headerlink" title="2.7MySQL注释符："></a><strong>2.7MySQL注释符：</strong></h3><p>1.注释符可以替换空格</p><p>2.内联注入：/<em>!/</em>!*/</p><p>/* */在MySQL中是多行注释，但是如果加了！，那么！后面的内容会被执行</p><p>3.单行注释符后面加换行也是可以执行的</p><p>/**/  #  –</p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-20.png?raw=true" alt="img1-20.png"></p><p> <img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-21.png?raw=true" alt="img1-21.png"></p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-22.png?raw=true" alt="img1-22.png"></p><h3 id="2-8SQL注入常见函数"><a href="#2-8SQL注入常见函数" class="headerlink" title="2.8SQL注入常见函数"></a><strong>2.8SQL注入常见函数</strong></h3><p>length(‘name’)：函数返回字符串的长度</p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-23.png?raw=true" alt="img1-23.png"></p><p>substr(‘name’,m,n)：函数截取字符串（从第m个开始，截取n个）</p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-24.png?raw=true" alt="img1-24.png"></p><p>ascii(‘a’)：返回字符的ascii码</p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-25.png?raw=true" alt="img1-25.png"></p><p>left(name,2)：函数返回name的左边2个字符，即na</p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-26.png?raw=true" alt="img1-26.png"></p><p>right(name,3)：函数返回name的右边3个字符，即ame</p><p><img src="https://github.com/yjqgetup/yjqgetup.github.io/blob/master/img/img1-27.png?raw=true" alt="img1-27.png"></p><p>mid(column_name,m,n) from table_name：函数返回从数据表中提取某列（整列下来）的字符（从第m个开始，提取n个）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1、MySQL数据库基础&quot;&gt;&lt;a href=&quot;#1、MySQL数据库基础&quot; class=&quot;headerlink&quot; title=&quot;1、MySQL数据库基础&quot;&gt;&lt;/a&gt;&lt;strong&gt;1、MySQL数据库基础&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-1MySQL</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php学习六</title>
    <link href="http://example.com/2021/02/03/php%E5%AD%A6%E4%B9%A0%E5%85%AD/"/>
    <id>http://example.com/2021/02/03/php%E5%AD%A6%E4%B9%A0%E5%85%AD/</id>
    <published>2021-02-03T06:09:21.000Z</published>
    <updated>2021-09-30T15:14:36.282Z</updated>
    
    <content type="html"><![CDATA[<p>一、循环<br>    while - 只要指定的条件成立，则循环执行代码块<br>    do…while - 首先执行一次代码块，然后在指定的条件成立时重复这个循环<br>    for - 循环执行代码块指定的次数<br>    foreach - 根据数组中每个元素来循环代码块</p><p>1、while循环<br>语法：<br>    while (条件)<br>    {<br>        要执行的代码;<br>    }</p><p>2、do while循环<br>语法：<br>    do<br>    {<br>        要执行的代码;<br>    }<br>    while (条件);</p><p>3、for循环<br>语法：<br>    for (初始值; 条件; 增量)<br>    {<br>        要执行的代码;<br>    }<br>参数：<br>    初始值：主要是初始化一个变量值，用于设置一个计数器（但可以是任何在循环的开始被执行一次的代码）。<br>    条件：循环执行的限制条件。如果为 TRUE，则循环继续。如果为 FALSE，则循环结束。<br>    增量：主要用于递增计数器（但可以是任何在循环的结束被执行的代码）。<br>注释：上面的初始值和增量参数可为空，或者有多个表达式（用逗号分隔）。</p><p> 4、foreach循环<br>语法：<br>（1）<br>    foreach ($array as $value)<br>    {<br>        要执行代码;<br>    }<br>（2）<br>    foreach ($array as $key =&gt; $value)<br>    {<br>        要执行代码;<br>    }</p><p>补充：冒泡循环<br>输入：<br><?php$arr = array(5,3,6,2,8,10);for($i = count($arr)-1;$i>=0;$i--){    for($j = 0 ; $j < $i ; $j++){        if($arr[$j+1] > $arr[$j] ){            $aa = $arr[$j+1];            $arr[$j+1] = $arr[$j];            $arr[$j] = $aa;        }    }}print_r($arr);?><br>输出：<br>Array<br>(<br>    [0] =&gt; 10<br>    [1] =&gt; 8<br>    [2] =&gt; 6<br>    [3] =&gt; 5<br>    [4] =&gt; 3<br>    [5] =&gt; 2<br>)</p><p>二、函数<br>1、函数准则：<br>    （1）函数的名称应该提示出它的功能<br>    （2）函数名称以字母或下划线开头（不能以数字开头）</p><p>2、函数中添加参数<br>注意：参数相当于一个变量<br>输出：函数括号中的值+参数所表达的值</p><p>3、函数返回值<br>用return返回索要调用的函数值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、循环&lt;br&gt;    while - 只要指定的条件成立，则循环执行代码块&lt;br&gt;    do…while - 首先执行一次代码块，然后在指定的条件成立时重复这个循环&lt;br&gt;    for - 循环执行代码块指定的次数&lt;br&gt;    foreach - 根据数组中每个元素</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php学习五</title>
    <link href="http://example.com/2021/02/01/php%E5%AD%A6%E4%B9%A0%E4%BA%94/"/>
    <id>http://example.com/2021/02/01/php%E5%AD%A6%E4%B9%A0%E4%BA%94/</id>
    <published>2021-02-01T04:58:09.000Z</published>
    <updated>2021-09-30T15:14:36.282Z</updated>
    
    <content type="html"><![CDATA[<p>一、If…Else 语句<br>    if 语句 - 在条件成立时执行代码<br>    if…else 语句 - 在条件成立时执行一块代码，条件不成立时执行另一块代码<br>    if…elseif….else 语句 - 在若干条件之一成立时执行一个代码块<br>    switch 语句 - 在若干条件之一成立时执行一个代码块</p><p>二、数组<br>定义：数组是一个能在单个变量中储存多个值的特殊变量。<br>在PHP中，array（）用于创建数组。</p><p>有三种类型的数组：<br>    数值数组 - 带有数字 ID 键的数组<br>    关联数组 - 带有指定的键的数组，每个键关联一个值<br>    多维数组 - 包含一个或多个数组的数组</p><p>1、数值数组<br>这里有两种创建数值数组的方法：<br>（1）自动分配 ID 键（ID 键总是从 0 开始）：<br>$cars=array(“Volvo”,”BMW”,”Toyota”);<br>（2）人工分配 ID 键：<br>$cars[0]=”Volvo”;<br>$cars[1]=”BMW”;<br>$cars[2]=”Toyota”;<br>注意：数组前后需要用点号隔开</p><p>2、关联数组<br>关联数组是使用您分配给数组的指定的键的数组。<br>这里有两种创建关联数组的方法：<br>（1）$age=array(“Peter”=&gt;”35”,”Ben”=&gt;”37”,”Joe”=&gt;”43”);</p><p>（2）$age[‘Peter’]=”35”;<br>         $age[‘Ben’]=”37”;<br>         $age[‘Joe’]=”43”; </p><p>三、数组排序<br>1、sort()函数<br>作用：对数组进行升序排列<br>（1）最终输出必须用print_r();<br>（2）字母或数字都是按从小到大的顺序排列的</p><p>2、rsort()函数<br>作用：对数组进行降序排序<br>（1）最终输出必须用print_r();<br>（2）字母或数字都是按从大到小的顺序排列的</p><p>3、asort()函数<br>作用：根据数组的值，对数组进行升序排列<br>（1）最终输出必须用print_r();<br>（2）按值的字母或数字从小到大的顺序排列</p><p>4、arsort()函数<br>作用：根据数组的值，对数组进行降序排列<br>（1）最终输出必须用print_r();<br>（2）按值的字母或数字从大到小的顺序排列</p><p>5、ksort()函数<br>作用：根据数组的键，对数组进行升序排列<br>（1）最终输出必须用print_r();<br>（2）按照键的字母或数字从小到大排序</p><p>6、krsort()函数<br>作用： 根据数组的键，对数组进行降序排列<br>（1）最终输出必须用print_r();<br>（2）按照键的字母或数字从大到小排序<br>———————————————————————————————<br>学习笔记补充：<br>1、date()函数<br>a - “am” 或是 “pm”；<br> A - “AM” 或是 “PM”；<br> D - 星期几，三个英文字母; 如: “Fri”；<br> F - 月份，英文全名; 如: “January”；<br> h - 12 小时制的小时; 如: “01” 至 “12”；<br> g - 12 小时制的小时，不足二位不补零; 如: “1” 至 12”；<br> G - 24 小时制的小时，不足二位不补零; 如: “0” 至 “23”；<br> j - 几日，二位数字，若不足二位不补零; 如: “1” 至 “31”；<br> l - 星期几，英文全名; 如: “Friday”；<br> n - 月份，二位数字，若不足二位则不补零; 如: “1” 至 “12”；<br>m - 分钟，二位数字，若不足二位则补零；如：”01” 至 “60”;<br> M - 月份，三个英文字母; 如: “Jan”；<br> S - 字尾加英文序数，二个英文字母; 如: “th”，”nd”；<br> t - 指定月份的天数; 如: “28” 至 “31”；<br> U - 总秒数；<br> w - 数字型的星期几，如: “0” (星期日) 至 “6” (星期六)；<br> y - 年，二位数字; 如: “99”；<br> z - 一年中的第几天; 如: “0” 至 “365”。</p><p>2、count()函数<br>作用：用于返回数组的长度（元素的数量）</p><p>3、print_r()函数<br>作用：用于打印变量，以更容易理解的形式展示<br>注：可用于数组内部排序</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、If…Else 语句&lt;br&gt;    if 语句 - 在条件成立时执行代码&lt;br&gt;    if…else 语句 - 在条件成立时执行一块代码，条件不成立时执行另一块代码&lt;br&gt;    if…elseif….else 语句 - 在若干条件之一成立时执行一个代码块&lt;br&gt;  </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php学习四</title>
    <link href="http://example.com/2021/01/31/php%E5%AD%A6%E4%B9%A0%E5%9B%9B/"/>
    <id>http://example.com/2021/01/31/php%E5%AD%A6%E4%B9%A0%E5%9B%9B/</id>
    <published>2021-01-31T08:29:27.000Z</published>
    <updated>2021-09-30T15:14:36.283Z</updated>
    
    <content type="html"><![CDATA[<p>一、字符串<br>1、PHP中的字符串变量<br>（1）字符串变量用于包含有字符的值</p><p>（2）可以直接在函数中使用字符串，或者把它储存在变量中</p><p>2、PHP 并置运算符（.）<br>作用：用于把两个字符串值连接起来</p><p>3、PHP strlen（）函数<br>作用：返回字符串的长度（字节数）。</p><p>4、PHP strpos（）函数<br>作用：用于在字符串内查找一个字符或一段指定的文本。<br>          如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE。</p><p>二、运算符<br>1、算术运算符<br>x + y        加                     x 和 y 的和<br>x - y        减                     x 和 y 的差<br>x * y        乘                     x 和 y 的积<br>x / y        除                     x 和 y 的商<br>x % y        模（除法的余数）     x 除以 y 的余数<br>-x                取反                         x取反<br>a . b        并置                     连接两个字符串 </p><p>2、赋值运算符<br>x = y        x = y                      左操作数被设置为右侧表达式的值<br>x += y        x = x + y      加<br>x -= y        x = x - y                 减<br>x *= y        x = x * y      乘<br>x /= y        x = x / y      除<br>x %= y        x = x % y      模（除法的余数）<br>a .= b        a = a . b      连接两个字符串</p><p>3、递增运算符<br>++ x        预递增                      x 加 1，然后返回 x<br>x ++        后递增                      返回 x，然后 x 加 1<br>– x        预递减                      x 减 1，然后返回 x<br>x –        后递减                      返回 x，然后 x 减 1</p><p>4、比较运算符<br>x == y        等于                     如果 x 等于 y，则返回 true<br>x === y        绝对等于     如果 x 等于 y，且它们类型相同，则返回 true<br>x != y        不等于                     如果 x 不等于 y，则返回 true<br>x &lt;&gt; y        不等于                     如果 x 不等于 y，则返回 true<br>x !== y        绝对不等于     如果 x 不等于 y，或它们类型不相同，则返回 true<br>x &gt; y        大于                     如果 x 大于 y，则返回 true<br>x &lt; y        小于                     如果 x 小于 y，则返回 true<br>x &gt;= y        大于等于     如果 x 大于或者等于 y，则返回 true<br>x &lt;= y         小于等于     如果 x 小于或者等于 y，则返回 true     </p><p>5、逻辑运算符<br>x and y        与                     如果 x 和 y 都为 true，则返回 true<br>x or y        或                     如果 x 和 y 至少有一个为 true，则返回 true<br>x xor y        异或                     如果 x 和 y 有且仅有一个为 true，则返回 true<br>x &amp;&amp; y        与                     如果 x 和 y 都为 true，则返回 true<br>x || y        或                     如果 x 和 y 至少有一个为 true，则返回 true<br>! x        非                     如果 x 不为 true，则返回 true     x=6</p><p>6、数组运算符<br>x + y        集合                     x 和 y 的集合<br>x == y        相等                     如果 x 和 y 具有相同的键/值对，则返回 true<br>x === y        恒等                     如果 x 和 y 具有相同的键/值对，且顺序相同类型相同，则返回 true<br>x != y        不相等                     如果 x 不等于 y，则返回 true<br>x &lt;&gt; y        不相等                   如果 x 不等于 y，则返回 true<br>x !== y        不恒等                       如果 x 不等于 y，则返回 true</p><p>7、三元运算符<br>(expr1) ? (expr2) : (expr3)<br>对 expr1 求值为 TRUE 时的值为 expr2，在 expr1 求值为 FALSE 时的值为 expr3。</p><p>8、组合比较符<br>$c = $a &lt;=&gt; $b;<br>解析如下：<br>    如果 $a &gt; $b, 则 $c 的值为 1。<br>    如果 $a == $b, 则 $c 的值为 0。<br>    如果 $a &lt; $b, 则 $c 的值为 -1。</p><p>9、运算符优先级<br>无        clone new      clone 和 new<br>左        [                    array()<br>右        ++ – ~ (int) (float) (string) (array) (object) (bool) @     类型和递增／递减<br>无        instanceof      类型<br>右        !                    逻辑运算符<br>左        * / %         算术运算符<br>左        + – .          算术运算符和字符串运算符<br>左        &lt;&lt; &gt;&gt;      位运算符<br>无        == != === !== &lt;&gt;     比较运算符<br>左        &amp;                    位运算符和引用<br>左        ^                    位运算符<br>左                |                   位运算符<br>左        &amp;&amp;                    逻辑运算符<br>左        ||                    逻辑运算符<br>左        ? :                    三元运算符<br>右        = += -= *= /= .= %= &amp;= |= ^= &lt;&lt;= &gt;&gt;= =&gt;     赋值运算符<br>左        and                    逻辑运算符<br>左        xor                    逻辑运算符<br>左        or                    逻辑运算符<br>左        ,                    多处用到</p><p>——————————————————————————————————————————————————<br>学习笔记补充：<br>1、intdiv()函数<br>    作用：返回值为第一个参数除于第二个参数的值并取整（向下取整）<br>2、isset()函数<br>    作用：用于检测变量是否已设置并且非NULL。如果已经使用unset（）释放了一个变量之后，再通过isset（）判断将返回FALSE。<br>3、PHP_EOL 是一个换行符，兼容更大平台。<br>4、=&gt;,-&gt;的意思和用法：<br>（1）意思:<br>（a）-&gt;是对象执行方法或取得属性用的。<br>（b）=&gt;是数组里键和值对应用的。（左侧表示键，右侧表示值）</p><p>（2）用法<br>（a）=&gt; 的用法数组中用于数组的 key 和 value之间的关系例如：<br>$a = array(‘0’ =&gt; ‘1’,’2’ =&gt; ‘4’,);echo $a[‘0’];echo $a[‘2’];<br>（b）-&gt; 的用法类中用于引用类实例的方法和属性例如：<br>class Test{function add(){return $this-&gt;var++;}var $var = 0;}$a = new Test;<br>//实例化对象名称</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、字符串&lt;br&gt;1、PHP中的字符串变量&lt;br&gt;（1）字符串变量用于包含有字符的值&lt;/p&gt;
&lt;p&gt;（2）可以直接在函数中使用字符串，或者把它储存在变量中&lt;/p&gt;
&lt;p&gt;2、PHP 并置运算符（.）&lt;br&gt;作用：用于把两个字符串值连接起来&lt;/p&gt;
&lt;p&gt;3、PHP strl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php学习三</title>
    <link href="http://example.com/2021/01/29/php%E5%AD%A6%E4%B9%A0%E4%B8%89/"/>
    <id>http://example.com/2021/01/29/php%E5%AD%A6%E4%B9%A0%E4%B8%89/</id>
    <published>2021-01-29T08:19:24.000Z</published>
    <updated>2021-09-30T15:14:36.280Z</updated>
    
    <content type="html"><![CDATA[<p>一、PHP类型比较<br>（1）松散比较：使用两个等号 == 比较，只比较值，不比较类型；<br>（2）严格比较：用三个等号 === 比较，除了比较值，也比较类型。</p><p>二、PHP中比较0、false、null、””、”0”<br>对于 【0 ；’0’ ；’’ ；null； false】五种类型</p><p>empty操作以上五个变量，都返回false</p><p>强等于(===)比较 都为false，同强语言结果(三个等号比较不但要比较值，而且要比较类型)</p><p>但对于(==)比较，需要注意string类型，涉及到底层结构与类型转换</p><p>结论一：关于变量类型的理解</p><p>1.null为不存在之意：php底层的zval空间里（结构见下方）没有存其value值，只存储了一个type标志其 IS_NULL(所以解释了 empty(null)=true，isset(null)=false ，isset(‘’)=true)</p><p>2.【0 ; ‘0’ ; ‘’ ; false 】：这四个为存在，php底层是开辟zval空间存储，有value,有type</p><p>结论二：</p><p>1、string ‘0’与 string ‘’ 不相等,（想一下就明白，同类型比较【1个长度】的字符串怎么可能 等于 【0个长度】 的字符串）</p><p>2、int 0 却和 string ‘’ 空相等,（非同类形比较，php会做类型转换）</p><p>3、string ‘0’ 与 null 不相等，int 0 与 null 相等</p><p>三、PHP常量<br>    常量是一个简单值的标识符。该值在脚本中不能改变。<br>    一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)。<br>    注意： 常量在整个脚本中都可以使用。</p><p>define()函数语法如下：<br>bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )<br>该函数有三个参数：<br>    name：必选参数，常量名称，即标志符。<br>    value：必选参数，常量的值。<br>    case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、PHP类型比较&lt;br&gt;（1）松散比较：使用两个等号 == 比较，只比较值，不比较类型；&lt;br&gt;（2）严格比较：用三个等号 === 比较，除了比较值，也比较类型。&lt;/p&gt;
&lt;p&gt;二、PHP中比较0、false、null、””、”0”&lt;br&gt;对于 【0 ；’0’ ；’’ ；</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php学习二</title>
    <link href="http://example.com/2021/01/27/php%E5%AD%A6%E4%B9%A0%E4%BA%8C/"/>
    <id>http://example.com/2021/01/27/php%E5%AD%A6%E4%B9%A0%E4%BA%8C/</id>
    <published>2021-01-27T06:16:44.000Z</published>
    <updated>2021-09-30T15:14:36.281Z</updated>
    
    <content type="html"><![CDATA[<p>一、echo和print语句的区别</p><ul><li>echo - 可以输出一个或多个字符串</li><li>print - 只允许输出一个字符串，返回值总为 1<br>提示：echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</li></ul><p>二、EOF(heredoc) 使用说明<br>PHP EOF(heredoc)是一种在命令行shell（如sh、csh、ksh、bash、PowerShell和zsh）和程序语言（像Perl、PHP、Python和Ruby）里定义一个字符串的方法。<br> 使用概述：</p><ol><li>必须后接分号，否则编译通不过。</li><li>EOF 可以用任意其它字符代替，只需保证结束标识与开始标识一致。</li><li>结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)。***</li><li>开始标识可以不带引号或带单双引号，不带引号与带双引号效果一致，解释内嵌的变量和转义符号，带单引号则不解释内嵌的变量和转义符号。</li><li>当内容需要内嵌引号（单引号或双引号）时，不需要加转义符，本身对单双引号转义。</li></ol><p>三、数据类型<br>String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值）。<br>1、字符串型<br>既可以把文本放在单引号中，也可哟把文本放在双引号中。</p><p>2、整型<br>整数规则：<br>    整数必须至少有一个数字 (0-9)<br>    整数不能包含逗号或空格<br>    整数是没有小数点的<br>    整数可以是正数或负数<br>    整型可以用三种格式来指定：十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）。</p><p>3、浮点型<br>带小数的类型</p><p>4、布尔型<br>用于条件判断，可以是true或false</p><p>5、数组<br>在一个变量中储存多个值</p><p>6、对象<br>对象数据类型也可以用于存储数据。<br>在 PHP 中，对象必须声明。<br>首先，你必须使用class关键字声明类对象，类是可以包含属性和方法的结构。<br>实例<br>||&lt;?php<br>class Car<br>{<br>     var $color;//声明汽车的颜色属性<br>     function __construct($color=”green”) //汽车类的构造函数(new时调用)，默认颜色参数值为绿色<br>    {<br>      $this-&gt;color = $color;//将汽车的颜色属性值设置为传入的颜色<br>    }<br>    function what_color() //获取汽车颜色的方法<br>    {<br>      return $this-&gt;color;<br>        /<em>$this代表Car类中的变量,“-&gt;”代表访问，<br>        它的意思是把$color这个Car类中的Car函数的变量赋值给Car类中的$color变量</em>/<br>    }<br>}<br>function print_vars($obj) {<br>   foreach (get_object_vars($obj) as $prop =&gt; $val) {<br>     echo “\t$prop = $val\n”;<br>   }<br>}</p><p>// 实例一个对象<br>$herbie = new Car(“white”);<br>// 显示 herbie 属性<br>echo “\therbie: Properties\n”;<br>print_vars($herbie);//格式化输出，这里会输出$herbie所有的信息，包括类型、值……<br>?&gt;  ||</p><p>7、NULL值<br>NULL 值表示变量没有值<br>————————————————————————————————————————————<br>学习笔记补充：<br>1、var_dump（）函数作用：php var_dump 函数作用是判断一个变量的类型与长度,并输出变量的数值,如果变量有值输的是变量的值并回返数据类型<br>注：用var_dump里面的变量必须是存在的,如果变量存在但值是空的就会返回false。<br>2、var_dump 和 print_r 的区别<br>var_dump 返回表达式的类型与值而 print_r 仅返回结果</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、echo和print语句的区别&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;echo - 可以输出一个或多个字符串&lt;/li&gt;
&lt;li&gt;print - 只允许输出一个字符串，返回值总为 1&lt;br&gt;提示：echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>php学习一</title>
    <link href="http://example.com/2021/01/25/php%E5%AD%A6%E4%B9%A0%E4%B8%80/"/>
    <id>http://example.com/2021/01/25/php%E5%AD%A6%E4%B9%A0%E4%B8%80/</id>
    <published>2021-01-25T04:19:15.000Z</published>
    <updated>2021-09-30T15:14:36.278Z</updated>
    
    <content type="html"><![CDATA[<p>一、PHP语法<br>1、PHP 脚本可以放在文档中的任何位置。<br>2、PHP 脚本以 <?php 开始，以 ?> 结束：<br>3、PHP 文件的默认文件扩展名是 “.php”。<br>4、PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码。<br>5、PHP 中的每个代码行都必须以分号结束。分号是一种分隔符，用于把指令集区分开来。<br>6、通过 PHP，有两种在浏览器输出文本的基础指令：echo 和 print。</p><p>二、PHP变量<br>1、PHP 变量规则：<br>（1）变量以 $ 符号开始，后面跟着变量的名称<br>（2）变量名必须以字母或者下划线字符开始<br>（3）变量名只能包含字母数字字符以及下划线（A-z、0-9 和 _ ）<br>（4）变量名不能包含空格<br>（5）变量名是区分大小写的（$y 和 $Y 是两个不同的变量）<br>2、PHP变量作用域：<br>*local     *global     *static      *parameter<br>（1）局部和全局作用域<br> 在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字。<br>在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问：<br>实例<br>||&lt;?php<br>$x=5; // 全局变量</p><p>function myTest()<br>{<br>    $y=10; // 局部变量<br>    echo “<p>测试函数内变量:<p>“;<br>    echo “变量 x 为: $x”;<br>    echo “<br>“;<br>    echo “变量 y 为: $y”;<br>} </p><p>myTest();</p><p>echo “<p>测试函数外变量:<p>“;<br>echo “变量 x 为: $x”;<br>echo “<br>“;<br>echo “变量 y 为: $y”;<br>?&gt; ||<br>分析： 在以上实例中 myTest() 函数定义了 $x 和 $y 变量。 $x 变量在函数外声明，所以它是全局变量 ， $y 变量在函数内声明所以它是局部变量。</p><p>当我们调用myTest()函数并输出两个变量的值, 函数将会输出局部变量 $y 的值，但是不能输出 $x 的值，因为 $x 变量在函数外定义，无法在函数内使用，如果要在一个函数中访问一个全局变量，需要使用 global 关键字。</p><p>然后我们在myTest()函数外输出两个变量的值，函数将会输出全局变量 $x 的值，但是不能输出 $y 的值，因为 $y 变量在函数中定义，属于局部变量。</p><p>（2）PHP global 关键字<br> global 关键字用于函数内访问全局变量。<br>在函数内调用函数外定义的全局变量，我们需要在函数中的变量前加上 global 关键字：<br>实例：<br>||&lt;?php<br>$x=5;<br>$y=10;</p><p>function myTest()<br>{<br>    global $x,$y;<br>    $y=$x+$y;<br>}</p><p>myTest();<br>echo $y; // 输出 15<br>?&gt;||</p><p>PHP 将所有全局变量存储在一个名为 $GLOBALS[index] 的数组中。 index 保存变量的名称。这个数组可以在函数内部访问，也可以直接用来更新全局变量。<br>上面的实例可以写成这样：<br>实例：<br>||&lt;?php<br>$x=5;<br>$y=10;</p><p>function myTest()<br>{<br>    $GLOBALS[‘y’]=$GLOBALS[‘x’]+$GLOBALS[‘y’];<br>} </p><p>myTest();<br>echo $y;<br>?&gt;</p><p>实例<br>&lt;?php<br>$x=5;<br>$y=10;</p><p>function myTest()<br>{<br>    $GLOBALS[‘y’]=$GLOBALS[‘x’]+$GLOBALS[‘y’];<br>} </p><p>myTest();<br>echo $y;<br>?&gt;||</p><p>（3）Static 作用域<br>当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。<br>要做到这一点，请在您第一次声明变量时使用 static 关键字：<br>实例<br>||&lt;?php<br>function myTest()<br>{<br>    static $x=0;<br>    echo $x;<br>    $x++;<br>    echo PHP_EOL;    // 换行符<br>}</p><p>myTest();<br>myTest();<br>myTest();<br>?&gt;||<br>然后，每次调用该函数时，该变量将会保留着函数前一次被调用时的值。<br>注释：该变量仍然是函数的局部变量。</p><p>（4）参数作用域<br>参数是通过调用代码将值传递给函数的局部变量。</p><p>参数是在参数列表中声明的，作为函数声明的一部分：<br>实例<br>||<?phpfunction myTest($x){    echo $x;}myTest(5);?>||</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、PHP语法&lt;br&gt;1、PHP 脚本可以放在文档中的任何位置。&lt;br&gt;2、PHP 脚本以 &lt;?php 开始，以 ?&gt; 结束：&lt;br&gt;3、PHP 文件的默认文件扩展名是 “.php”。&lt;br&gt;4、PHP 文件通常包含 HTML 标签和一些 PHP 脚本代码。&lt;br&gt;5、PH</summary>
      
    
    
    
    
  </entry>
  
</feed>
